{"version":3,"file":"static/js/387.0131462d.chunk.js","mappings":"8JAMA,IAJe,kBACX,0BAAK,SAAC,KAAD,KADM,C,uLCAFA,EAAQC,EAAAA,GAAAA,EAAH,kEAKLC,EAAOD,EAAAA,GAAAA,GAAH,oE,SC8CjB,EA9CgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAmCF,EAAAA,EAAAA,WAAS,GAA5C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KA2BA,OAzBAC,EAAAA,EAAAA,IAAS,WAAM,wCACb,8GAEgCC,EAAAA,EAAAA,IAAWV,GAF3C,UAI8C,KAFpCW,EAFV,QAIsBC,KAAKC,QAAQC,OAJnC,uBAKMV,EAAeO,EAAcC,KAAKC,SAClCP,GAAc,GANpB,gCAUIA,GAAc,GACdF,EAAe,IACT,IAAIW,MAAM,4CAZpB,kCAcIT,GAAc,GACdE,EAAS,EAAD,IACRJ,EAAe,IACfY,QAAQC,IAAR,MAjBJ,2DADa,sBAsBbX,GAAc,GAtBA,WAAD,wBAuBbY,EACD,KAEC,+BACGb,IAAa,SAACc,EAAA,EAAD,IACbZ,IAAS,wBAAKA,EAAMa,UACG,IAAvBjB,EAAYW,SAAe,SAACf,EAAD,UACzBI,EAAYkB,KAAI,SAACC,GAAD,OACjB,2BACE,UAACzB,EAAD,qBAAeyB,EAAOC,WACtB,uBAAID,EAAOE,YAFJF,EAAOG,GADC,QAQxB,C,mMCjDKC,EAAW,+BACXC,EAAW,mCAEJC,EAAiB,mCAAG,oGACNC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,uCAAoDC,EAApD,YADM,cACvBG,EADuB,yBAEtBA,GAFsB,2CAAH,qDAKvB,SAAgBC,EAAvB,+CAAO,OAAP,oBAAO,WAA4B/B,GAA5B,uFACoB6B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+B1B,EAA/B,oBAAkD2B,EAAlD,YADpB,cACGG,EADH,yBAEIA,GAFJ,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACoBJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iCAA8CC,EAA9C,kBAA+DM,EAA/D,YADpB,cACGH,EADH,yBAEIA,GAFJ,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAyBlC,GAAzB,uFACoB6B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+B1B,EAA/B,4BAA0D2B,IAD9E,cACGG,EADH,yBAEIA,GAFJ,kEAKA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA0BV,GAA1B,uFACoB6B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+B1B,EAA/B,4BAA0D2B,IAD9E,cACGG,EADH,yBAEIA,GAFJ,kE,oECrBP,EAHoB,SAAUK,IAC1BC,EAAAA,EAAAA,WAAUD,EAAQ,GACrB,ECGD,EALe,SAAUE,GACrBC,GAAc,WACVD,GACH,GACJ,C","sources":["components/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/servisApi.js","../node_modules/react-use/esm/useEffectOnce.js","../node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner'\n\nconst Loader = () => (\n    <div><ThreeDots /></div>\n)\n\nexport default Loader;","import styled from 'styled-components';\n\nexport const Avtor = styled.p `\n    color: black;\n    font-weight: 700;\n`;\n\nexport const List = styled.ul`\n    list-style: none;\n    font-weight: 0;\n`;","import { useParams } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useMount } from 'react-use';\nimport { getReviews } from \"../servisApi\";\nimport Loader from '../Loader';\nimport { Avtor, List } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [filmReviews, setFilmReviews] = useState([]);\n  const [isLoading, setIsLoadings] = useState(false);\n  const [error, setError] = useState('');\n\n  useMount(() => {\n    async function getFilm() {\n      try {\n        const searchReviews = await getReviews(movieId)\n        \n        if (searchReviews.data.results.length !== 0) {\n          setFilmReviews(searchReviews.data.results)\n          setIsLoadings(false)\n          return \n        }\n\n        setIsLoadings(false)\n        setFilmReviews([])\n        throw new Error(\"We don't have any reviews for this movie\");\n      } catch (error) {\n        setIsLoadings(false)\n        setError(error)\n        setFilmReviews([])\n        console.log(error);\n      }\n    }\n\n    setIsLoadings(true)\n    getFilm()      \n  })\n  return (\n    <section>\n      {isLoading && <Loader />}\n      {error && <h2>{error.message}</h2>}\n      {filmReviews.length !== 0 &&<List>\n        {filmReviews.map((review) => (\n        <li key={review.id}>\n          <Avtor>Autor: {review.author}</Avtor>\n          <p>{review.content}</p>\n        </li>\n      ))}</List>}\n    </section>\n  );\n};\n\nexport default Reviews;","import axios from 'axios'; \n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY =  '0f09f0e29eb26a1e28b4809ac59dbd60';\n\nexport const getTrendingMovies = async () => {\n    const response = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=1`);\n    return response;\n    };\n\nexport async function  getMoviesID(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&page=1`);\n    return response;\n};\n\nexport async function getSearchFilms(searchFilm) {\n    const response = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchFilm}&page=1`);\n    return response;\n};\n\nexport async function getActors(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n    return response;\n};\n\nexport async function getReviews(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return response;\n};\n","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["Avtor","styled","List","movieId","useParams","useState","filmReviews","setFilmReviews","isLoading","setIsLoadings","error","setError","useMount","getReviews","searchReviews","data","results","length","Error","console","log","getFilm","Loader","message","map","review","author","content","id","BASE_URL","API_KEY","getTrendingMovies","axios","response","getMoviesID","getSearchFilms","searchFilm","getActors","effect","useEffect","fn","useEffectOnce"],"sourceRoot":""}