{"version":3,"file":"static/js/597.3e53bbdf.chunk.js","mappings":"sRAMaA,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAmCF,EAAAA,EAAAA,WAAS,GAA5C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KA2BA,OAzBAC,EAAAA,EAAAA,IAAS,WAAM,wCACb,8GAE+BC,EAAAA,EAAAA,IAAUV,GAFzC,UAI0C,KAFhCW,EAFV,QAIqBC,KAAKC,KAAKC,OAJ/B,uBAKMV,EAAcO,EAAaC,KAAKC,MAChCP,GAAc,GANpB,gCASIA,GAAc,GACdF,EAAc,IACR,IAAIW,MAAM,oBAXpB,kCAaIT,GAAc,GACdE,EAAS,EAAD,IACRJ,EAAc,IACdY,QAAQC,IAAR,MAhBJ,2DADa,sBAqBbX,GAAc,GArBA,WAAD,wBAsBbY,EACD,KAGC,+BACGb,IAAa,SAAC,IAAD,IACbE,IAAS,wBAAKA,EAAMY,UACE,IAAtBhB,EAAWW,SAAgB,wBACzBX,EAAWiB,KAAI,SAACC,GAAD,OAAY,0BACzBA,EAAMC,eAAgB,gBAAKC,MAAO,IAAKC,IAAG,yCAAoCH,EAAMC,cAAgBG,IAAI,MACvGJ,EAAMC,eAAgB,gBAAKC,MAAO,IAAKC,IAAK,0EAA2EC,IAAI,MAC7H,uBAAIJ,EAAMK,QACV,uCAAeL,EAAMM,eAJcN,EAAMO,GAA3B,QAUvB,C,8EClDYC,EAAS,kBAClB,0BAAK,SAAC,KAAD,KADa,EAItB,K,mMCJMC,EAAW,+BACXC,EAAW,mCAEJC,EAAiB,mCAAG,oGACNC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,uCAAoDC,EAApD,YADM,cACvBG,EADuB,yBAEtBA,GAFsB,2CAAH,qDAKvB,SAAgBC,EAAvB,+CAAO,OAAP,oBAAO,WAA4BnC,GAA5B,uFACoBiC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+B9B,EAA/B,oBAAkD+B,EAAlD,YADpB,cACGG,EADH,yBAEIA,GAFJ,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACoBJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iCAA8CC,EAA9C,kBAA+DM,EAA/D,WADpB,cACGH,EADH,yBAEIA,GAFJ,kEAKA,SAAexB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBV,GAAzB,uFACoBiC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+B9B,EAA/B,4BAA0D+B,IAD9E,cACGG,EADH,yBAEIA,GAFJ,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA0BtC,GAA1B,uFACoBiC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+B9B,EAA/B,4BAA0D+B,IAD9E,cACGG,EADH,yBAEIA,GAFJ,kE","sources":["components/Cast.jsx","components/Loader.jsx","components/servisApi.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useMount } from 'react-use';\nimport { getActors } from \"./servisApi\";\nimport Loader from './Loader';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [filmActors, setFilmActors] = useState([]);\n  const [isLoading, setIsLoadings] = useState(false);\n  const [error, setError] = useState('');\n\n  useMount(() => {\n    async function getFilm() {\n      try {\n        const searchActors = await getActors(movieId)\n        \n        if (searchActors.data.cast.length !== 0) {\n          setFilmActors(searchActors.data.cast)\n          setIsLoadings(false)\n          return \n         }\n        setIsLoadings(false)\n        setFilmActors([])\n        throw new Error(\"Sory, no result!\");\n      } catch (error) {\n        setIsLoadings(false)\n        setError(error)\n        setFilmActors([])\n        console.log(error);\n      }\n    }\n\n    setIsLoadings(true)\n    getFilm()      \n  })\n\n  return (\n    <section>\n      {isLoading && <Loader />}\n      {error && <h2>{error.message}</h2>}\n      {filmActors.length !== 0 && <ul>\n        {filmActors.map((actor) => (<li key={actor.id}>\n          {actor.profile_path && <img width={100} src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`} alt=\"\" />}\n          {!actor.profile_path && <img width={100} src={\"https://www.meme-arsenal.com/memes/fefac21eda463aa9a307c7cfdbea1bee.jpg\"} alt=\"\" />}\n          <p>{actor.name}</p>\n          <p>Character: {actor.character}</p>\n        </li>\n        ))}\n      </ul>}\n    </section>\n  );\n};\n","import { ThreeDots } from 'react-loader-spinner'\n\nexport const Loader = () => (\n    <div><ThreeDots /></div>\n);\n\nexport default Loader;","import axios from 'axios'; \n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY =  '0f09f0e29eb26a1e28b4809ac59dbd60';\n\nexport const getTrendingMovies = async () => {\n    const response = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=1`);\n    return response;\n    };\n\nexport async function  getMoviesID(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&page=1`);\n    return response;\n};\n\nexport async function getSearchFilms(searchFilm) {\n    const response = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchFilm}page=1`);\n    return response;\n};\n\nexport async function getActors(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n    return response;\n};\n\nexport async function getReviews(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return response;\n};\n"],"names":["Cast","movieId","useParams","useState","filmActors","setFilmActors","isLoading","setIsLoadings","error","setError","useMount","getActors","searchActors","data","cast","length","Error","console","log","getFilm","message","map","actor","profile_path","width","src","alt","name","character","id","Loader","BASE_URL","API_KEY","getTrendingMovies","axios","response","getMoviesID","getSearchFilms","searchFilm","getReviews"],"sourceRoot":""}